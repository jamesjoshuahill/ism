// Code generated by counterfeiter. DO NOT EDIT.
package commandsfakes

import (
	sync "sync"

	commands "github.com/pivotal-cf/ism/commands"
	usecases "github.com/pivotal-cf/ism/usecases"
)

type FakeBindingListUsecase struct {
	GetBindingsStub        func() ([]*usecases.Binding, error)
	getBindingsMutex       sync.RWMutex
	getBindingsArgsForCall []struct {
	}
	getBindingsReturns struct {
		result1 []*usecases.Binding
		result2 error
	}
	getBindingsReturnsOnCall map[int]struct {
		result1 []*usecases.Binding
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBindingListUsecase) GetBindings() ([]*usecases.Binding, error) {
	fake.getBindingsMutex.Lock()
	ret, specificReturn := fake.getBindingsReturnsOnCall[len(fake.getBindingsArgsForCall)]
	fake.getBindingsArgsForCall = append(fake.getBindingsArgsForCall, struct {
	}{})
	fake.recordInvocation("GetBindings", []interface{}{})
	fake.getBindingsMutex.Unlock()
	if fake.GetBindingsStub != nil {
		return fake.GetBindingsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBindingsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBindingListUsecase) GetBindingsCallCount() int {
	fake.getBindingsMutex.RLock()
	defer fake.getBindingsMutex.RUnlock()
	return len(fake.getBindingsArgsForCall)
}

func (fake *FakeBindingListUsecase) GetBindingsCalls(stub func() ([]*usecases.Binding, error)) {
	fake.getBindingsMutex.Lock()
	defer fake.getBindingsMutex.Unlock()
	fake.GetBindingsStub = stub
}

func (fake *FakeBindingListUsecase) GetBindingsReturns(result1 []*usecases.Binding, result2 error) {
	fake.getBindingsMutex.Lock()
	defer fake.getBindingsMutex.Unlock()
	fake.GetBindingsStub = nil
	fake.getBindingsReturns = struct {
		result1 []*usecases.Binding
		result2 error
	}{result1, result2}
}

func (fake *FakeBindingListUsecase) GetBindingsReturnsOnCall(i int, result1 []*usecases.Binding, result2 error) {
	fake.getBindingsMutex.Lock()
	defer fake.getBindingsMutex.Unlock()
	fake.GetBindingsStub = nil
	if fake.getBindingsReturnsOnCall == nil {
		fake.getBindingsReturnsOnCall = make(map[int]struct {
			result1 []*usecases.Binding
			result2 error
		})
	}
	fake.getBindingsReturnsOnCall[i] = struct {
		result1 []*usecases.Binding
		result2 error
	}{result1, result2}
}

func (fake *FakeBindingListUsecase) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getBindingsMutex.RLock()
	defer fake.getBindingsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBindingListUsecase) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.BindingListUsecase = new(FakeBindingListUsecase)
