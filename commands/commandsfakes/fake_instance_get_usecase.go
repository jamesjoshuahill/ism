// Code generated by counterfeiter. DO NOT EDIT.
package commandsfakes

import (
	"sync"

	"github.com/pivotal-cf/ism/commands"
	"github.com/pivotal-cf/ism/usecases"
)

type FakeInstanceGetUsecase struct {
	GetInstanceDetailsByNameStub        func(string) (*usecases.InstanceDetails, error)
	getInstanceDetailsByNameMutex       sync.RWMutex
	getInstanceDetailsByNameArgsForCall []struct {
		arg1 string
	}
	getInstanceDetailsByNameReturns struct {
		result1 *usecases.InstanceDetails
		result2 error
	}
	getInstanceDetailsByNameReturnsOnCall map[int]struct {
		result1 *usecases.InstanceDetails
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInstanceGetUsecase) GetInstanceDetailsByName(arg1 string) (*usecases.InstanceDetails, error) {
	fake.getInstanceDetailsByNameMutex.Lock()
	ret, specificReturn := fake.getInstanceDetailsByNameReturnsOnCall[len(fake.getInstanceDetailsByNameArgsForCall)]
	fake.getInstanceDetailsByNameArgsForCall = append(fake.getInstanceDetailsByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetInstanceDetailsByName", []interface{}{arg1})
	fake.getInstanceDetailsByNameMutex.Unlock()
	if fake.GetInstanceDetailsByNameStub != nil {
		return fake.GetInstanceDetailsByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getInstanceDetailsByNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInstanceGetUsecase) GetInstanceDetailsByNameCallCount() int {
	fake.getInstanceDetailsByNameMutex.RLock()
	defer fake.getInstanceDetailsByNameMutex.RUnlock()
	return len(fake.getInstanceDetailsByNameArgsForCall)
}

func (fake *FakeInstanceGetUsecase) GetInstanceDetailsByNameCalls(stub func(string) (*usecases.InstanceDetails, error)) {
	fake.getInstanceDetailsByNameMutex.Lock()
	defer fake.getInstanceDetailsByNameMutex.Unlock()
	fake.GetInstanceDetailsByNameStub = stub
}

func (fake *FakeInstanceGetUsecase) GetInstanceDetailsByNameArgsForCall(i int) string {
	fake.getInstanceDetailsByNameMutex.RLock()
	defer fake.getInstanceDetailsByNameMutex.RUnlock()
	argsForCall := fake.getInstanceDetailsByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInstanceGetUsecase) GetInstanceDetailsByNameReturns(result1 *usecases.InstanceDetails, result2 error) {
	fake.getInstanceDetailsByNameMutex.Lock()
	defer fake.getInstanceDetailsByNameMutex.Unlock()
	fake.GetInstanceDetailsByNameStub = nil
	fake.getInstanceDetailsByNameReturns = struct {
		result1 *usecases.InstanceDetails
		result2 error
	}{result1, result2}
}

func (fake *FakeInstanceGetUsecase) GetInstanceDetailsByNameReturnsOnCall(i int, result1 *usecases.InstanceDetails, result2 error) {
	fake.getInstanceDetailsByNameMutex.Lock()
	defer fake.getInstanceDetailsByNameMutex.Unlock()
	fake.GetInstanceDetailsByNameStub = nil
	if fake.getInstanceDetailsByNameReturnsOnCall == nil {
		fake.getInstanceDetailsByNameReturnsOnCall = make(map[int]struct {
			result1 *usecases.InstanceDetails
			result2 error
		})
	}
	fake.getInstanceDetailsByNameReturnsOnCall[i] = struct {
		result1 *usecases.InstanceDetails
		result2 error
	}{result1, result2}
}

func (fake *FakeInstanceGetUsecase) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getInstanceDetailsByNameMutex.RLock()
	defer fake.getInstanceDetailsByNameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInstanceGetUsecase) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.InstanceGetUsecase = new(FakeInstanceGetUsecase)
