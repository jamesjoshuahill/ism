// Code generated by counterfeiter. DO NOT EDIT.
package actorsfakes

import (
	sync "sync"

	actors "github.com/pivotal-cf/ism/actors"
	osbapi "github.com/pivotal-cf/ism/osbapi"
)

type FakePlanRepository struct {
	FindStub        func(string) (*osbapi.Plan, error)
	findMutex       sync.RWMutex
	findArgsForCall []struct {
		arg1 string
	}
	findReturns struct {
		result1 *osbapi.Plan
		result2 error
	}
	findReturnsOnCall map[int]struct {
		result1 *osbapi.Plan
		result2 error
	}
	FindByServiceStub        func(string) ([]*osbapi.Plan, error)
	findByServiceMutex       sync.RWMutex
	findByServiceArgsForCall []struct {
		arg1 string
	}
	findByServiceReturns struct {
		result1 []*osbapi.Plan
		result2 error
	}
	findByServiceReturnsOnCall map[int]struct {
		result1 []*osbapi.Plan
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePlanRepository) Find(arg1 string) (*osbapi.Plan, error) {
	fake.findMutex.Lock()
	ret, specificReturn := fake.findReturnsOnCall[len(fake.findArgsForCall)]
	fake.findArgsForCall = append(fake.findArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Find", []interface{}{arg1})
	fake.findMutex.Unlock()
	if fake.FindStub != nil {
		return fake.FindStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.findReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePlanRepository) FindCallCount() int {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return len(fake.findArgsForCall)
}

func (fake *FakePlanRepository) FindCalls(stub func(string) (*osbapi.Plan, error)) {
	fake.findMutex.Lock()
	defer fake.findMutex.Unlock()
	fake.FindStub = stub
}

func (fake *FakePlanRepository) FindArgsForCall(i int) string {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	argsForCall := fake.findArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePlanRepository) FindReturns(result1 *osbapi.Plan, result2 error) {
	fake.findMutex.Lock()
	defer fake.findMutex.Unlock()
	fake.FindStub = nil
	fake.findReturns = struct {
		result1 *osbapi.Plan
		result2 error
	}{result1, result2}
}

func (fake *FakePlanRepository) FindReturnsOnCall(i int, result1 *osbapi.Plan, result2 error) {
	fake.findMutex.Lock()
	defer fake.findMutex.Unlock()
	fake.FindStub = nil
	if fake.findReturnsOnCall == nil {
		fake.findReturnsOnCall = make(map[int]struct {
			result1 *osbapi.Plan
			result2 error
		})
	}
	fake.findReturnsOnCall[i] = struct {
		result1 *osbapi.Plan
		result2 error
	}{result1, result2}
}

func (fake *FakePlanRepository) FindByService(arg1 string) ([]*osbapi.Plan, error) {
	fake.findByServiceMutex.Lock()
	ret, specificReturn := fake.findByServiceReturnsOnCall[len(fake.findByServiceArgsForCall)]
	fake.findByServiceArgsForCall = append(fake.findByServiceArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("FindByService", []interface{}{arg1})
	fake.findByServiceMutex.Unlock()
	if fake.FindByServiceStub != nil {
		return fake.FindByServiceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.findByServiceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePlanRepository) FindByServiceCallCount() int {
	fake.findByServiceMutex.RLock()
	defer fake.findByServiceMutex.RUnlock()
	return len(fake.findByServiceArgsForCall)
}

func (fake *FakePlanRepository) FindByServiceCalls(stub func(string) ([]*osbapi.Plan, error)) {
	fake.findByServiceMutex.Lock()
	defer fake.findByServiceMutex.Unlock()
	fake.FindByServiceStub = stub
}

func (fake *FakePlanRepository) FindByServiceArgsForCall(i int) string {
	fake.findByServiceMutex.RLock()
	defer fake.findByServiceMutex.RUnlock()
	argsForCall := fake.findByServiceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePlanRepository) FindByServiceReturns(result1 []*osbapi.Plan, result2 error) {
	fake.findByServiceMutex.Lock()
	defer fake.findByServiceMutex.Unlock()
	fake.FindByServiceStub = nil
	fake.findByServiceReturns = struct {
		result1 []*osbapi.Plan
		result2 error
	}{result1, result2}
}

func (fake *FakePlanRepository) FindByServiceReturnsOnCall(i int, result1 []*osbapi.Plan, result2 error) {
	fake.findByServiceMutex.Lock()
	defer fake.findByServiceMutex.Unlock()
	fake.FindByServiceStub = nil
	if fake.findByServiceReturnsOnCall == nil {
		fake.findByServiceReturnsOnCall = make(map[int]struct {
			result1 []*osbapi.Plan
			result2 error
		})
	}
	fake.findByServiceReturnsOnCall[i] = struct {
		result1 []*osbapi.Plan
		result2 error
	}{result1, result2}
}

func (fake *FakePlanRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	fake.findByServiceMutex.RLock()
	defer fake.findByServiceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePlanRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ actors.PlanRepository = new(FakePlanRepository)
