// Code generated by counterfeiter. DO NOT EDIT.
package usecasesfakes

import (
	"sync"

	"github.com/pivotal-cf/ism/osbapi"
	"github.com/pivotal-cf/ism/usecases"
)

type FakePlanFetcher struct {
	GetPlanByIDStub        func(string) (*osbapi.Plan, error)
	getPlanByIDMutex       sync.RWMutex
	getPlanByIDArgsForCall []struct {
		arg1 string
	}
	getPlanByIDReturns struct {
		result1 *osbapi.Plan
		result2 error
	}
	getPlanByIDReturnsOnCall map[int]struct {
		result1 *osbapi.Plan
		result2 error
	}
	GetPlansStub        func(string) ([]*osbapi.Plan, error)
	getPlansMutex       sync.RWMutex
	getPlansArgsForCall []struct {
		arg1 string
	}
	getPlansReturns struct {
		result1 []*osbapi.Plan
		result2 error
	}
	getPlansReturnsOnCall map[int]struct {
		result1 []*osbapi.Plan
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePlanFetcher) GetPlanByID(arg1 string) (*osbapi.Plan, error) {
	fake.getPlanByIDMutex.Lock()
	ret, specificReturn := fake.getPlanByIDReturnsOnCall[len(fake.getPlanByIDArgsForCall)]
	fake.getPlanByIDArgsForCall = append(fake.getPlanByIDArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetPlanByID", []interface{}{arg1})
	fake.getPlanByIDMutex.Unlock()
	if fake.GetPlanByIDStub != nil {
		return fake.GetPlanByIDStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPlanByIDReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePlanFetcher) GetPlanByIDCallCount() int {
	fake.getPlanByIDMutex.RLock()
	defer fake.getPlanByIDMutex.RUnlock()
	return len(fake.getPlanByIDArgsForCall)
}

func (fake *FakePlanFetcher) GetPlanByIDCalls(stub func(string) (*osbapi.Plan, error)) {
	fake.getPlanByIDMutex.Lock()
	defer fake.getPlanByIDMutex.Unlock()
	fake.GetPlanByIDStub = stub
}

func (fake *FakePlanFetcher) GetPlanByIDArgsForCall(i int) string {
	fake.getPlanByIDMutex.RLock()
	defer fake.getPlanByIDMutex.RUnlock()
	argsForCall := fake.getPlanByIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePlanFetcher) GetPlanByIDReturns(result1 *osbapi.Plan, result2 error) {
	fake.getPlanByIDMutex.Lock()
	defer fake.getPlanByIDMutex.Unlock()
	fake.GetPlanByIDStub = nil
	fake.getPlanByIDReturns = struct {
		result1 *osbapi.Plan
		result2 error
	}{result1, result2}
}

func (fake *FakePlanFetcher) GetPlanByIDReturnsOnCall(i int, result1 *osbapi.Plan, result2 error) {
	fake.getPlanByIDMutex.Lock()
	defer fake.getPlanByIDMutex.Unlock()
	fake.GetPlanByIDStub = nil
	if fake.getPlanByIDReturnsOnCall == nil {
		fake.getPlanByIDReturnsOnCall = make(map[int]struct {
			result1 *osbapi.Plan
			result2 error
		})
	}
	fake.getPlanByIDReturnsOnCall[i] = struct {
		result1 *osbapi.Plan
		result2 error
	}{result1, result2}
}

func (fake *FakePlanFetcher) GetPlans(arg1 string) ([]*osbapi.Plan, error) {
	fake.getPlansMutex.Lock()
	ret, specificReturn := fake.getPlansReturnsOnCall[len(fake.getPlansArgsForCall)]
	fake.getPlansArgsForCall = append(fake.getPlansArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetPlans", []interface{}{arg1})
	fake.getPlansMutex.Unlock()
	if fake.GetPlansStub != nil {
		return fake.GetPlansStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPlansReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePlanFetcher) GetPlansCallCount() int {
	fake.getPlansMutex.RLock()
	defer fake.getPlansMutex.RUnlock()
	return len(fake.getPlansArgsForCall)
}

func (fake *FakePlanFetcher) GetPlansCalls(stub func(string) ([]*osbapi.Plan, error)) {
	fake.getPlansMutex.Lock()
	defer fake.getPlansMutex.Unlock()
	fake.GetPlansStub = stub
}

func (fake *FakePlanFetcher) GetPlansArgsForCall(i int) string {
	fake.getPlansMutex.RLock()
	defer fake.getPlansMutex.RUnlock()
	argsForCall := fake.getPlansArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePlanFetcher) GetPlansReturns(result1 []*osbapi.Plan, result2 error) {
	fake.getPlansMutex.Lock()
	defer fake.getPlansMutex.Unlock()
	fake.GetPlansStub = nil
	fake.getPlansReturns = struct {
		result1 []*osbapi.Plan
		result2 error
	}{result1, result2}
}

func (fake *FakePlanFetcher) GetPlansReturnsOnCall(i int, result1 []*osbapi.Plan, result2 error) {
	fake.getPlansMutex.Lock()
	defer fake.getPlansMutex.Unlock()
	fake.GetPlansStub = nil
	if fake.getPlansReturnsOnCall == nil {
		fake.getPlansReturnsOnCall = make(map[int]struct {
			result1 []*osbapi.Plan
			result2 error
		})
	}
	fake.getPlansReturnsOnCall[i] = struct {
		result1 []*osbapi.Plan
		result2 error
	}{result1, result2}
}

func (fake *FakePlanFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getPlanByIDMutex.RLock()
	defer fake.getPlanByIDMutex.RUnlock()
	fake.getPlansMutex.RLock()
	defer fake.getPlansMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePlanFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ usecases.PlanFetcher = new(FakePlanFetcher)
