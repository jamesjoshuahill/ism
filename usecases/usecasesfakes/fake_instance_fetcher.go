// Code generated by counterfeiter. DO NOT EDIT.
package usecasesfakes

import (
	sync "sync"

	osbapi "github.com/pivotal-cf/ism/osbapi"
	usecases "github.com/pivotal-cf/ism/usecases"
)

type FakeInstanceFetcher struct {
	GetInstanceByNameStub        func(string) (*osbapi.Instance, error)
	getInstanceByNameMutex       sync.RWMutex
	getInstanceByNameArgsForCall []struct {
		arg1 string
	}
	getInstanceByNameReturns struct {
		result1 *osbapi.Instance
		result2 error
	}
	getInstanceByNameReturnsOnCall map[int]struct {
		result1 *osbapi.Instance
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInstanceFetcher) GetInstanceByName(arg1 string) (*osbapi.Instance, error) {
	fake.getInstanceByNameMutex.Lock()
	ret, specificReturn := fake.getInstanceByNameReturnsOnCall[len(fake.getInstanceByNameArgsForCall)]
	fake.getInstanceByNameArgsForCall = append(fake.getInstanceByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetInstanceByName", []interface{}{arg1})
	fake.getInstanceByNameMutex.Unlock()
	if fake.GetInstanceByNameStub != nil {
		return fake.GetInstanceByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getInstanceByNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInstanceFetcher) GetInstanceByNameCallCount() int {
	fake.getInstanceByNameMutex.RLock()
	defer fake.getInstanceByNameMutex.RUnlock()
	return len(fake.getInstanceByNameArgsForCall)
}

func (fake *FakeInstanceFetcher) GetInstanceByNameCalls(stub func(string) (*osbapi.Instance, error)) {
	fake.getInstanceByNameMutex.Lock()
	defer fake.getInstanceByNameMutex.Unlock()
	fake.GetInstanceByNameStub = stub
}

func (fake *FakeInstanceFetcher) GetInstanceByNameArgsForCall(i int) string {
	fake.getInstanceByNameMutex.RLock()
	defer fake.getInstanceByNameMutex.RUnlock()
	argsForCall := fake.getInstanceByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInstanceFetcher) GetInstanceByNameReturns(result1 *osbapi.Instance, result2 error) {
	fake.getInstanceByNameMutex.Lock()
	defer fake.getInstanceByNameMutex.Unlock()
	fake.GetInstanceByNameStub = nil
	fake.getInstanceByNameReturns = struct {
		result1 *osbapi.Instance
		result2 error
	}{result1, result2}
}

func (fake *FakeInstanceFetcher) GetInstanceByNameReturnsOnCall(i int, result1 *osbapi.Instance, result2 error) {
	fake.getInstanceByNameMutex.Lock()
	defer fake.getInstanceByNameMutex.Unlock()
	fake.GetInstanceByNameStub = nil
	if fake.getInstanceByNameReturnsOnCall == nil {
		fake.getInstanceByNameReturnsOnCall = make(map[int]struct {
			result1 *osbapi.Instance
			result2 error
		})
	}
	fake.getInstanceByNameReturnsOnCall[i] = struct {
		result1 *osbapi.Instance
		result2 error
	}{result1, result2}
}

func (fake *FakeInstanceFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getInstanceByNameMutex.RLock()
	defer fake.getInstanceByNameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInstanceFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ usecases.InstanceFetcher = new(FakeInstanceFetcher)
