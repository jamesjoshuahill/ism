// Code generated by counterfeiter. DO NOT EDIT.
package usecasesfakes

import (
	sync "sync"

	osbapi "github.com/pivotal-cf/ism/osbapi"
	usecases "github.com/pivotal-cf/ism/usecases"
)

type FakeServiceFetcher struct {
	GetServiceByIDStub        func(string) (*osbapi.Service, error)
	getServiceByIDMutex       sync.RWMutex
	getServiceByIDArgsForCall []struct {
		arg1 string
	}
	getServiceByIDReturns struct {
		result1 *osbapi.Service
		result2 error
	}
	getServiceByIDReturnsOnCall map[int]struct {
		result1 *osbapi.Service
		result2 error
	}
	GetServicesStub        func(string) ([]*osbapi.Service, error)
	getServicesMutex       sync.RWMutex
	getServicesArgsForCall []struct {
		arg1 string
	}
	getServicesReturns struct {
		result1 []*osbapi.Service
		result2 error
	}
	getServicesReturnsOnCall map[int]struct {
		result1 []*osbapi.Service
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceFetcher) GetServiceByID(arg1 string) (*osbapi.Service, error) {
	fake.getServiceByIDMutex.Lock()
	ret, specificReturn := fake.getServiceByIDReturnsOnCall[len(fake.getServiceByIDArgsForCall)]
	fake.getServiceByIDArgsForCall = append(fake.getServiceByIDArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetServiceByID", []interface{}{arg1})
	fake.getServiceByIDMutex.Unlock()
	if fake.GetServiceByIDStub != nil {
		return fake.GetServiceByIDStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServiceByIDReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceFetcher) GetServiceByIDCallCount() int {
	fake.getServiceByIDMutex.RLock()
	defer fake.getServiceByIDMutex.RUnlock()
	return len(fake.getServiceByIDArgsForCall)
}

func (fake *FakeServiceFetcher) GetServiceByIDCalls(stub func(string) (*osbapi.Service, error)) {
	fake.getServiceByIDMutex.Lock()
	defer fake.getServiceByIDMutex.Unlock()
	fake.GetServiceByIDStub = stub
}

func (fake *FakeServiceFetcher) GetServiceByIDArgsForCall(i int) string {
	fake.getServiceByIDMutex.RLock()
	defer fake.getServiceByIDMutex.RUnlock()
	argsForCall := fake.getServiceByIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceFetcher) GetServiceByIDReturns(result1 *osbapi.Service, result2 error) {
	fake.getServiceByIDMutex.Lock()
	defer fake.getServiceByIDMutex.Unlock()
	fake.GetServiceByIDStub = nil
	fake.getServiceByIDReturns = struct {
		result1 *osbapi.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceFetcher) GetServiceByIDReturnsOnCall(i int, result1 *osbapi.Service, result2 error) {
	fake.getServiceByIDMutex.Lock()
	defer fake.getServiceByIDMutex.Unlock()
	fake.GetServiceByIDStub = nil
	if fake.getServiceByIDReturnsOnCall == nil {
		fake.getServiceByIDReturnsOnCall = make(map[int]struct {
			result1 *osbapi.Service
			result2 error
		})
	}
	fake.getServiceByIDReturnsOnCall[i] = struct {
		result1 *osbapi.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceFetcher) GetServices(arg1 string) ([]*osbapi.Service, error) {
	fake.getServicesMutex.Lock()
	ret, specificReturn := fake.getServicesReturnsOnCall[len(fake.getServicesArgsForCall)]
	fake.getServicesArgsForCall = append(fake.getServicesArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetServices", []interface{}{arg1})
	fake.getServicesMutex.Unlock()
	if fake.GetServicesStub != nil {
		return fake.GetServicesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServicesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceFetcher) GetServicesCallCount() int {
	fake.getServicesMutex.RLock()
	defer fake.getServicesMutex.RUnlock()
	return len(fake.getServicesArgsForCall)
}

func (fake *FakeServiceFetcher) GetServicesCalls(stub func(string) ([]*osbapi.Service, error)) {
	fake.getServicesMutex.Lock()
	defer fake.getServicesMutex.Unlock()
	fake.GetServicesStub = stub
}

func (fake *FakeServiceFetcher) GetServicesArgsForCall(i int) string {
	fake.getServicesMutex.RLock()
	defer fake.getServicesMutex.RUnlock()
	argsForCall := fake.getServicesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceFetcher) GetServicesReturns(result1 []*osbapi.Service, result2 error) {
	fake.getServicesMutex.Lock()
	defer fake.getServicesMutex.Unlock()
	fake.GetServicesStub = nil
	fake.getServicesReturns = struct {
		result1 []*osbapi.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceFetcher) GetServicesReturnsOnCall(i int, result1 []*osbapi.Service, result2 error) {
	fake.getServicesMutex.Lock()
	defer fake.getServicesMutex.Unlock()
	fake.GetServicesStub = nil
	if fake.getServicesReturnsOnCall == nil {
		fake.getServicesReturnsOnCall = make(map[int]struct {
			result1 []*osbapi.Service
			result2 error
		})
	}
	fake.getServicesReturnsOnCall[i] = struct {
		result1 []*osbapi.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getServiceByIDMutex.RLock()
	defer fake.getServiceByIDMutex.RUnlock()
	fake.getServicesMutex.RLock()
	defer fake.getServicesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ usecases.ServiceFetcher = new(FakeServiceFetcher)
