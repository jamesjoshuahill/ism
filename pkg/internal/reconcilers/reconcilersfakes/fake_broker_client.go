// Code generated by counterfeiter. DO NOT EDIT.
package reconcilersfakes

import (
	"sync"

	"github.com/pivotal-cf/ism/pkg/internal/reconcilers"
	v2 "github.com/pmorie/go-open-service-broker-client/v2"
)

type FakeBrokerClient struct {
	BindStub        func(*v2.BindRequest) (*v2.BindResponse, error)
	bindMutex       sync.RWMutex
	bindArgsForCall []struct {
		arg1 *v2.BindRequest
	}
	bindReturns struct {
		result1 *v2.BindResponse
		result2 error
	}
	bindReturnsOnCall map[int]struct {
		result1 *v2.BindResponse
		result2 error
	}
	DeprovisionInstanceStub        func(*v2.DeprovisionRequest) (*v2.DeprovisionResponse, error)
	deprovisionInstanceMutex       sync.RWMutex
	deprovisionInstanceArgsForCall []struct {
		arg1 *v2.DeprovisionRequest
	}
	deprovisionInstanceReturns struct {
		result1 *v2.DeprovisionResponse
		result2 error
	}
	deprovisionInstanceReturnsOnCall map[int]struct {
		result1 *v2.DeprovisionResponse
		result2 error
	}
	GetBindingStub        func(*v2.GetBindingRequest) (*v2.GetBindingResponse, error)
	getBindingMutex       sync.RWMutex
	getBindingArgsForCall []struct {
		arg1 *v2.GetBindingRequest
	}
	getBindingReturns struct {
		result1 *v2.GetBindingResponse
		result2 error
	}
	getBindingReturnsOnCall map[int]struct {
		result1 *v2.GetBindingResponse
		result2 error
	}
	GetCatalogStub        func() (*v2.CatalogResponse, error)
	getCatalogMutex       sync.RWMutex
	getCatalogArgsForCall []struct {
	}
	getCatalogReturns struct {
		result1 *v2.CatalogResponse
		result2 error
	}
	getCatalogReturnsOnCall map[int]struct {
		result1 *v2.CatalogResponse
		result2 error
	}
	PollBindingLastOperationStub        func(*v2.BindingLastOperationRequest) (*v2.LastOperationResponse, error)
	pollBindingLastOperationMutex       sync.RWMutex
	pollBindingLastOperationArgsForCall []struct {
		arg1 *v2.BindingLastOperationRequest
	}
	pollBindingLastOperationReturns struct {
		result1 *v2.LastOperationResponse
		result2 error
	}
	pollBindingLastOperationReturnsOnCall map[int]struct {
		result1 *v2.LastOperationResponse
		result2 error
	}
	PollLastOperationStub        func(*v2.LastOperationRequest) (*v2.LastOperationResponse, error)
	pollLastOperationMutex       sync.RWMutex
	pollLastOperationArgsForCall []struct {
		arg1 *v2.LastOperationRequest
	}
	pollLastOperationReturns struct {
		result1 *v2.LastOperationResponse
		result2 error
	}
	pollLastOperationReturnsOnCall map[int]struct {
		result1 *v2.LastOperationResponse
		result2 error
	}
	ProvisionInstanceStub        func(*v2.ProvisionRequest) (*v2.ProvisionResponse, error)
	provisionInstanceMutex       sync.RWMutex
	provisionInstanceArgsForCall []struct {
		arg1 *v2.ProvisionRequest
	}
	provisionInstanceReturns struct {
		result1 *v2.ProvisionResponse
		result2 error
	}
	provisionInstanceReturnsOnCall map[int]struct {
		result1 *v2.ProvisionResponse
		result2 error
	}
	UnbindStub        func(*v2.UnbindRequest) (*v2.UnbindResponse, error)
	unbindMutex       sync.RWMutex
	unbindArgsForCall []struct {
		arg1 *v2.UnbindRequest
	}
	unbindReturns struct {
		result1 *v2.UnbindResponse
		result2 error
	}
	unbindReturnsOnCall map[int]struct {
		result1 *v2.UnbindResponse
		result2 error
	}
	UpdateInstanceStub        func(*v2.UpdateInstanceRequest) (*v2.UpdateInstanceResponse, error)
	updateInstanceMutex       sync.RWMutex
	updateInstanceArgsForCall []struct {
		arg1 *v2.UpdateInstanceRequest
	}
	updateInstanceReturns struct {
		result1 *v2.UpdateInstanceResponse
		result2 error
	}
	updateInstanceReturnsOnCall map[int]struct {
		result1 *v2.UpdateInstanceResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBrokerClient) Bind(arg1 *v2.BindRequest) (*v2.BindResponse, error) {
	fake.bindMutex.Lock()
	ret, specificReturn := fake.bindReturnsOnCall[len(fake.bindArgsForCall)]
	fake.bindArgsForCall = append(fake.bindArgsForCall, struct {
		arg1 *v2.BindRequest
	}{arg1})
	fake.recordInvocation("Bind", []interface{}{arg1})
	fake.bindMutex.Unlock()
	if fake.BindStub != nil {
		return fake.BindStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.bindReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBrokerClient) BindCallCount() int {
	fake.bindMutex.RLock()
	defer fake.bindMutex.RUnlock()
	return len(fake.bindArgsForCall)
}

func (fake *FakeBrokerClient) BindCalls(stub func(*v2.BindRequest) (*v2.BindResponse, error)) {
	fake.bindMutex.Lock()
	defer fake.bindMutex.Unlock()
	fake.BindStub = stub
}

func (fake *FakeBrokerClient) BindArgsForCall(i int) *v2.BindRequest {
	fake.bindMutex.RLock()
	defer fake.bindMutex.RUnlock()
	argsForCall := fake.bindArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBrokerClient) BindReturns(result1 *v2.BindResponse, result2 error) {
	fake.bindMutex.Lock()
	defer fake.bindMutex.Unlock()
	fake.BindStub = nil
	fake.bindReturns = struct {
		result1 *v2.BindResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerClient) BindReturnsOnCall(i int, result1 *v2.BindResponse, result2 error) {
	fake.bindMutex.Lock()
	defer fake.bindMutex.Unlock()
	fake.BindStub = nil
	if fake.bindReturnsOnCall == nil {
		fake.bindReturnsOnCall = make(map[int]struct {
			result1 *v2.BindResponse
			result2 error
		})
	}
	fake.bindReturnsOnCall[i] = struct {
		result1 *v2.BindResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerClient) DeprovisionInstance(arg1 *v2.DeprovisionRequest) (*v2.DeprovisionResponse, error) {
	fake.deprovisionInstanceMutex.Lock()
	ret, specificReturn := fake.deprovisionInstanceReturnsOnCall[len(fake.deprovisionInstanceArgsForCall)]
	fake.deprovisionInstanceArgsForCall = append(fake.deprovisionInstanceArgsForCall, struct {
		arg1 *v2.DeprovisionRequest
	}{arg1})
	fake.recordInvocation("DeprovisionInstance", []interface{}{arg1})
	fake.deprovisionInstanceMutex.Unlock()
	if fake.DeprovisionInstanceStub != nil {
		return fake.DeprovisionInstanceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deprovisionInstanceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBrokerClient) DeprovisionInstanceCallCount() int {
	fake.deprovisionInstanceMutex.RLock()
	defer fake.deprovisionInstanceMutex.RUnlock()
	return len(fake.deprovisionInstanceArgsForCall)
}

func (fake *FakeBrokerClient) DeprovisionInstanceCalls(stub func(*v2.DeprovisionRequest) (*v2.DeprovisionResponse, error)) {
	fake.deprovisionInstanceMutex.Lock()
	defer fake.deprovisionInstanceMutex.Unlock()
	fake.DeprovisionInstanceStub = stub
}

func (fake *FakeBrokerClient) DeprovisionInstanceArgsForCall(i int) *v2.DeprovisionRequest {
	fake.deprovisionInstanceMutex.RLock()
	defer fake.deprovisionInstanceMutex.RUnlock()
	argsForCall := fake.deprovisionInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBrokerClient) DeprovisionInstanceReturns(result1 *v2.DeprovisionResponse, result2 error) {
	fake.deprovisionInstanceMutex.Lock()
	defer fake.deprovisionInstanceMutex.Unlock()
	fake.DeprovisionInstanceStub = nil
	fake.deprovisionInstanceReturns = struct {
		result1 *v2.DeprovisionResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerClient) DeprovisionInstanceReturnsOnCall(i int, result1 *v2.DeprovisionResponse, result2 error) {
	fake.deprovisionInstanceMutex.Lock()
	defer fake.deprovisionInstanceMutex.Unlock()
	fake.DeprovisionInstanceStub = nil
	if fake.deprovisionInstanceReturnsOnCall == nil {
		fake.deprovisionInstanceReturnsOnCall = make(map[int]struct {
			result1 *v2.DeprovisionResponse
			result2 error
		})
	}
	fake.deprovisionInstanceReturnsOnCall[i] = struct {
		result1 *v2.DeprovisionResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerClient) GetBinding(arg1 *v2.GetBindingRequest) (*v2.GetBindingResponse, error) {
	fake.getBindingMutex.Lock()
	ret, specificReturn := fake.getBindingReturnsOnCall[len(fake.getBindingArgsForCall)]
	fake.getBindingArgsForCall = append(fake.getBindingArgsForCall, struct {
		arg1 *v2.GetBindingRequest
	}{arg1})
	fake.recordInvocation("GetBinding", []interface{}{arg1})
	fake.getBindingMutex.Unlock()
	if fake.GetBindingStub != nil {
		return fake.GetBindingStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBindingReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBrokerClient) GetBindingCallCount() int {
	fake.getBindingMutex.RLock()
	defer fake.getBindingMutex.RUnlock()
	return len(fake.getBindingArgsForCall)
}

func (fake *FakeBrokerClient) GetBindingCalls(stub func(*v2.GetBindingRequest) (*v2.GetBindingResponse, error)) {
	fake.getBindingMutex.Lock()
	defer fake.getBindingMutex.Unlock()
	fake.GetBindingStub = stub
}

func (fake *FakeBrokerClient) GetBindingArgsForCall(i int) *v2.GetBindingRequest {
	fake.getBindingMutex.RLock()
	defer fake.getBindingMutex.RUnlock()
	argsForCall := fake.getBindingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBrokerClient) GetBindingReturns(result1 *v2.GetBindingResponse, result2 error) {
	fake.getBindingMutex.Lock()
	defer fake.getBindingMutex.Unlock()
	fake.GetBindingStub = nil
	fake.getBindingReturns = struct {
		result1 *v2.GetBindingResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerClient) GetBindingReturnsOnCall(i int, result1 *v2.GetBindingResponse, result2 error) {
	fake.getBindingMutex.Lock()
	defer fake.getBindingMutex.Unlock()
	fake.GetBindingStub = nil
	if fake.getBindingReturnsOnCall == nil {
		fake.getBindingReturnsOnCall = make(map[int]struct {
			result1 *v2.GetBindingResponse
			result2 error
		})
	}
	fake.getBindingReturnsOnCall[i] = struct {
		result1 *v2.GetBindingResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerClient) GetCatalog() (*v2.CatalogResponse, error) {
	fake.getCatalogMutex.Lock()
	ret, specificReturn := fake.getCatalogReturnsOnCall[len(fake.getCatalogArgsForCall)]
	fake.getCatalogArgsForCall = append(fake.getCatalogArgsForCall, struct {
	}{})
	fake.recordInvocation("GetCatalog", []interface{}{})
	fake.getCatalogMutex.Unlock()
	if fake.GetCatalogStub != nil {
		return fake.GetCatalogStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getCatalogReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBrokerClient) GetCatalogCallCount() int {
	fake.getCatalogMutex.RLock()
	defer fake.getCatalogMutex.RUnlock()
	return len(fake.getCatalogArgsForCall)
}

func (fake *FakeBrokerClient) GetCatalogCalls(stub func() (*v2.CatalogResponse, error)) {
	fake.getCatalogMutex.Lock()
	defer fake.getCatalogMutex.Unlock()
	fake.GetCatalogStub = stub
}

func (fake *FakeBrokerClient) GetCatalogReturns(result1 *v2.CatalogResponse, result2 error) {
	fake.getCatalogMutex.Lock()
	defer fake.getCatalogMutex.Unlock()
	fake.GetCatalogStub = nil
	fake.getCatalogReturns = struct {
		result1 *v2.CatalogResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerClient) GetCatalogReturnsOnCall(i int, result1 *v2.CatalogResponse, result2 error) {
	fake.getCatalogMutex.Lock()
	defer fake.getCatalogMutex.Unlock()
	fake.GetCatalogStub = nil
	if fake.getCatalogReturnsOnCall == nil {
		fake.getCatalogReturnsOnCall = make(map[int]struct {
			result1 *v2.CatalogResponse
			result2 error
		})
	}
	fake.getCatalogReturnsOnCall[i] = struct {
		result1 *v2.CatalogResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerClient) PollBindingLastOperation(arg1 *v2.BindingLastOperationRequest) (*v2.LastOperationResponse, error) {
	fake.pollBindingLastOperationMutex.Lock()
	ret, specificReturn := fake.pollBindingLastOperationReturnsOnCall[len(fake.pollBindingLastOperationArgsForCall)]
	fake.pollBindingLastOperationArgsForCall = append(fake.pollBindingLastOperationArgsForCall, struct {
		arg1 *v2.BindingLastOperationRequest
	}{arg1})
	fake.recordInvocation("PollBindingLastOperation", []interface{}{arg1})
	fake.pollBindingLastOperationMutex.Unlock()
	if fake.PollBindingLastOperationStub != nil {
		return fake.PollBindingLastOperationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.pollBindingLastOperationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBrokerClient) PollBindingLastOperationCallCount() int {
	fake.pollBindingLastOperationMutex.RLock()
	defer fake.pollBindingLastOperationMutex.RUnlock()
	return len(fake.pollBindingLastOperationArgsForCall)
}

func (fake *FakeBrokerClient) PollBindingLastOperationCalls(stub func(*v2.BindingLastOperationRequest) (*v2.LastOperationResponse, error)) {
	fake.pollBindingLastOperationMutex.Lock()
	defer fake.pollBindingLastOperationMutex.Unlock()
	fake.PollBindingLastOperationStub = stub
}

func (fake *FakeBrokerClient) PollBindingLastOperationArgsForCall(i int) *v2.BindingLastOperationRequest {
	fake.pollBindingLastOperationMutex.RLock()
	defer fake.pollBindingLastOperationMutex.RUnlock()
	argsForCall := fake.pollBindingLastOperationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBrokerClient) PollBindingLastOperationReturns(result1 *v2.LastOperationResponse, result2 error) {
	fake.pollBindingLastOperationMutex.Lock()
	defer fake.pollBindingLastOperationMutex.Unlock()
	fake.PollBindingLastOperationStub = nil
	fake.pollBindingLastOperationReturns = struct {
		result1 *v2.LastOperationResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerClient) PollBindingLastOperationReturnsOnCall(i int, result1 *v2.LastOperationResponse, result2 error) {
	fake.pollBindingLastOperationMutex.Lock()
	defer fake.pollBindingLastOperationMutex.Unlock()
	fake.PollBindingLastOperationStub = nil
	if fake.pollBindingLastOperationReturnsOnCall == nil {
		fake.pollBindingLastOperationReturnsOnCall = make(map[int]struct {
			result1 *v2.LastOperationResponse
			result2 error
		})
	}
	fake.pollBindingLastOperationReturnsOnCall[i] = struct {
		result1 *v2.LastOperationResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerClient) PollLastOperation(arg1 *v2.LastOperationRequest) (*v2.LastOperationResponse, error) {
	fake.pollLastOperationMutex.Lock()
	ret, specificReturn := fake.pollLastOperationReturnsOnCall[len(fake.pollLastOperationArgsForCall)]
	fake.pollLastOperationArgsForCall = append(fake.pollLastOperationArgsForCall, struct {
		arg1 *v2.LastOperationRequest
	}{arg1})
	fake.recordInvocation("PollLastOperation", []interface{}{arg1})
	fake.pollLastOperationMutex.Unlock()
	if fake.PollLastOperationStub != nil {
		return fake.PollLastOperationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.pollLastOperationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBrokerClient) PollLastOperationCallCount() int {
	fake.pollLastOperationMutex.RLock()
	defer fake.pollLastOperationMutex.RUnlock()
	return len(fake.pollLastOperationArgsForCall)
}

func (fake *FakeBrokerClient) PollLastOperationCalls(stub func(*v2.LastOperationRequest) (*v2.LastOperationResponse, error)) {
	fake.pollLastOperationMutex.Lock()
	defer fake.pollLastOperationMutex.Unlock()
	fake.PollLastOperationStub = stub
}

func (fake *FakeBrokerClient) PollLastOperationArgsForCall(i int) *v2.LastOperationRequest {
	fake.pollLastOperationMutex.RLock()
	defer fake.pollLastOperationMutex.RUnlock()
	argsForCall := fake.pollLastOperationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBrokerClient) PollLastOperationReturns(result1 *v2.LastOperationResponse, result2 error) {
	fake.pollLastOperationMutex.Lock()
	defer fake.pollLastOperationMutex.Unlock()
	fake.PollLastOperationStub = nil
	fake.pollLastOperationReturns = struct {
		result1 *v2.LastOperationResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerClient) PollLastOperationReturnsOnCall(i int, result1 *v2.LastOperationResponse, result2 error) {
	fake.pollLastOperationMutex.Lock()
	defer fake.pollLastOperationMutex.Unlock()
	fake.PollLastOperationStub = nil
	if fake.pollLastOperationReturnsOnCall == nil {
		fake.pollLastOperationReturnsOnCall = make(map[int]struct {
			result1 *v2.LastOperationResponse
			result2 error
		})
	}
	fake.pollLastOperationReturnsOnCall[i] = struct {
		result1 *v2.LastOperationResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerClient) ProvisionInstance(arg1 *v2.ProvisionRequest) (*v2.ProvisionResponse, error) {
	fake.provisionInstanceMutex.Lock()
	ret, specificReturn := fake.provisionInstanceReturnsOnCall[len(fake.provisionInstanceArgsForCall)]
	fake.provisionInstanceArgsForCall = append(fake.provisionInstanceArgsForCall, struct {
		arg1 *v2.ProvisionRequest
	}{arg1})
	fake.recordInvocation("ProvisionInstance", []interface{}{arg1})
	fake.provisionInstanceMutex.Unlock()
	if fake.ProvisionInstanceStub != nil {
		return fake.ProvisionInstanceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.provisionInstanceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBrokerClient) ProvisionInstanceCallCount() int {
	fake.provisionInstanceMutex.RLock()
	defer fake.provisionInstanceMutex.RUnlock()
	return len(fake.provisionInstanceArgsForCall)
}

func (fake *FakeBrokerClient) ProvisionInstanceCalls(stub func(*v2.ProvisionRequest) (*v2.ProvisionResponse, error)) {
	fake.provisionInstanceMutex.Lock()
	defer fake.provisionInstanceMutex.Unlock()
	fake.ProvisionInstanceStub = stub
}

func (fake *FakeBrokerClient) ProvisionInstanceArgsForCall(i int) *v2.ProvisionRequest {
	fake.provisionInstanceMutex.RLock()
	defer fake.provisionInstanceMutex.RUnlock()
	argsForCall := fake.provisionInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBrokerClient) ProvisionInstanceReturns(result1 *v2.ProvisionResponse, result2 error) {
	fake.provisionInstanceMutex.Lock()
	defer fake.provisionInstanceMutex.Unlock()
	fake.ProvisionInstanceStub = nil
	fake.provisionInstanceReturns = struct {
		result1 *v2.ProvisionResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerClient) ProvisionInstanceReturnsOnCall(i int, result1 *v2.ProvisionResponse, result2 error) {
	fake.provisionInstanceMutex.Lock()
	defer fake.provisionInstanceMutex.Unlock()
	fake.ProvisionInstanceStub = nil
	if fake.provisionInstanceReturnsOnCall == nil {
		fake.provisionInstanceReturnsOnCall = make(map[int]struct {
			result1 *v2.ProvisionResponse
			result2 error
		})
	}
	fake.provisionInstanceReturnsOnCall[i] = struct {
		result1 *v2.ProvisionResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerClient) Unbind(arg1 *v2.UnbindRequest) (*v2.UnbindResponse, error) {
	fake.unbindMutex.Lock()
	ret, specificReturn := fake.unbindReturnsOnCall[len(fake.unbindArgsForCall)]
	fake.unbindArgsForCall = append(fake.unbindArgsForCall, struct {
		arg1 *v2.UnbindRequest
	}{arg1})
	fake.recordInvocation("Unbind", []interface{}{arg1})
	fake.unbindMutex.Unlock()
	if fake.UnbindStub != nil {
		return fake.UnbindStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.unbindReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBrokerClient) UnbindCallCount() int {
	fake.unbindMutex.RLock()
	defer fake.unbindMutex.RUnlock()
	return len(fake.unbindArgsForCall)
}

func (fake *FakeBrokerClient) UnbindCalls(stub func(*v2.UnbindRequest) (*v2.UnbindResponse, error)) {
	fake.unbindMutex.Lock()
	defer fake.unbindMutex.Unlock()
	fake.UnbindStub = stub
}

func (fake *FakeBrokerClient) UnbindArgsForCall(i int) *v2.UnbindRequest {
	fake.unbindMutex.RLock()
	defer fake.unbindMutex.RUnlock()
	argsForCall := fake.unbindArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBrokerClient) UnbindReturns(result1 *v2.UnbindResponse, result2 error) {
	fake.unbindMutex.Lock()
	defer fake.unbindMutex.Unlock()
	fake.UnbindStub = nil
	fake.unbindReturns = struct {
		result1 *v2.UnbindResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerClient) UnbindReturnsOnCall(i int, result1 *v2.UnbindResponse, result2 error) {
	fake.unbindMutex.Lock()
	defer fake.unbindMutex.Unlock()
	fake.UnbindStub = nil
	if fake.unbindReturnsOnCall == nil {
		fake.unbindReturnsOnCall = make(map[int]struct {
			result1 *v2.UnbindResponse
			result2 error
		})
	}
	fake.unbindReturnsOnCall[i] = struct {
		result1 *v2.UnbindResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerClient) UpdateInstance(arg1 *v2.UpdateInstanceRequest) (*v2.UpdateInstanceResponse, error) {
	fake.updateInstanceMutex.Lock()
	ret, specificReturn := fake.updateInstanceReturnsOnCall[len(fake.updateInstanceArgsForCall)]
	fake.updateInstanceArgsForCall = append(fake.updateInstanceArgsForCall, struct {
		arg1 *v2.UpdateInstanceRequest
	}{arg1})
	fake.recordInvocation("UpdateInstance", []interface{}{arg1})
	fake.updateInstanceMutex.Unlock()
	if fake.UpdateInstanceStub != nil {
		return fake.UpdateInstanceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateInstanceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBrokerClient) UpdateInstanceCallCount() int {
	fake.updateInstanceMutex.RLock()
	defer fake.updateInstanceMutex.RUnlock()
	return len(fake.updateInstanceArgsForCall)
}

func (fake *FakeBrokerClient) UpdateInstanceCalls(stub func(*v2.UpdateInstanceRequest) (*v2.UpdateInstanceResponse, error)) {
	fake.updateInstanceMutex.Lock()
	defer fake.updateInstanceMutex.Unlock()
	fake.UpdateInstanceStub = stub
}

func (fake *FakeBrokerClient) UpdateInstanceArgsForCall(i int) *v2.UpdateInstanceRequest {
	fake.updateInstanceMutex.RLock()
	defer fake.updateInstanceMutex.RUnlock()
	argsForCall := fake.updateInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBrokerClient) UpdateInstanceReturns(result1 *v2.UpdateInstanceResponse, result2 error) {
	fake.updateInstanceMutex.Lock()
	defer fake.updateInstanceMutex.Unlock()
	fake.UpdateInstanceStub = nil
	fake.updateInstanceReturns = struct {
		result1 *v2.UpdateInstanceResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerClient) UpdateInstanceReturnsOnCall(i int, result1 *v2.UpdateInstanceResponse, result2 error) {
	fake.updateInstanceMutex.Lock()
	defer fake.updateInstanceMutex.Unlock()
	fake.UpdateInstanceStub = nil
	if fake.updateInstanceReturnsOnCall == nil {
		fake.updateInstanceReturnsOnCall = make(map[int]struct {
			result1 *v2.UpdateInstanceResponse
			result2 error
		})
	}
	fake.updateInstanceReturnsOnCall[i] = struct {
		result1 *v2.UpdateInstanceResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bindMutex.RLock()
	defer fake.bindMutex.RUnlock()
	fake.deprovisionInstanceMutex.RLock()
	defer fake.deprovisionInstanceMutex.RUnlock()
	fake.getBindingMutex.RLock()
	defer fake.getBindingMutex.RUnlock()
	fake.getCatalogMutex.RLock()
	defer fake.getCatalogMutex.RUnlock()
	fake.pollBindingLastOperationMutex.RLock()
	defer fake.pollBindingLastOperationMutex.RUnlock()
	fake.pollLastOperationMutex.RLock()
	defer fake.pollLastOperationMutex.RUnlock()
	fake.provisionInstanceMutex.RLock()
	defer fake.provisionInstanceMutex.RUnlock()
	fake.unbindMutex.RLock()
	defer fake.unbindMutex.RUnlock()
	fake.updateInstanceMutex.RLock()
	defer fake.updateInstanceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBrokerClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ reconcilers.BrokerClient = new(FakeBrokerClient)
