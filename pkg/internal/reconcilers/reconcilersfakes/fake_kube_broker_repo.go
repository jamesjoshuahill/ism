// Code generated by counterfeiter. DO NOT EDIT.
package reconcilersfakes

import (
	"sync"

	"github.com/pivotal-cf/ism/pkg/apis/osbapi/v1alpha1"
	"github.com/pivotal-cf/ism/pkg/internal/reconcilers"
	"k8s.io/apimachinery/pkg/types"
)

type FakeKubeBrokerRepo struct {
	GetStub        func(types.NamespacedName) (*v1alpha1.Broker, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 types.NamespacedName
	}
	getReturns struct {
		result1 *v1alpha1.Broker
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *v1alpha1.Broker
		result2 error
	}
	UpdateStateStub        func(*v1alpha1.Broker, v1alpha1.BrokerState) error
	updateStateMutex       sync.RWMutex
	updateStateArgsForCall []struct {
		arg1 *v1alpha1.Broker
		arg2 v1alpha1.BrokerState
	}
	updateStateReturns struct {
		result1 error
	}
	updateStateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeKubeBrokerRepo) Get(arg1 types.NamespacedName) (*v1alpha1.Broker, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 types.NamespacedName
	}{arg1})
	fake.recordInvocation("Get", []interface{}{arg1})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKubeBrokerRepo) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeKubeBrokerRepo) GetCalls(stub func(types.NamespacedName) (*v1alpha1.Broker, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeKubeBrokerRepo) GetArgsForCall(i int) types.NamespacedName {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeKubeBrokerRepo) GetReturns(result1 *v1alpha1.Broker, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *v1alpha1.Broker
		result2 error
	}{result1, result2}
}

func (fake *FakeKubeBrokerRepo) GetReturnsOnCall(i int, result1 *v1alpha1.Broker, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.Broker
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *v1alpha1.Broker
		result2 error
	}{result1, result2}
}

func (fake *FakeKubeBrokerRepo) UpdateState(arg1 *v1alpha1.Broker, arg2 v1alpha1.BrokerState) error {
	fake.updateStateMutex.Lock()
	ret, specificReturn := fake.updateStateReturnsOnCall[len(fake.updateStateArgsForCall)]
	fake.updateStateArgsForCall = append(fake.updateStateArgsForCall, struct {
		arg1 *v1alpha1.Broker
		arg2 v1alpha1.BrokerState
	}{arg1, arg2})
	fake.recordInvocation("UpdateState", []interface{}{arg1, arg2})
	fake.updateStateMutex.Unlock()
	if fake.UpdateStateStub != nil {
		return fake.UpdateStateStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.updateStateReturns
	return fakeReturns.result1
}

func (fake *FakeKubeBrokerRepo) UpdateStateCallCount() int {
	fake.updateStateMutex.RLock()
	defer fake.updateStateMutex.RUnlock()
	return len(fake.updateStateArgsForCall)
}

func (fake *FakeKubeBrokerRepo) UpdateStateCalls(stub func(*v1alpha1.Broker, v1alpha1.BrokerState) error) {
	fake.updateStateMutex.Lock()
	defer fake.updateStateMutex.Unlock()
	fake.UpdateStateStub = stub
}

func (fake *FakeKubeBrokerRepo) UpdateStateArgsForCall(i int) (*v1alpha1.Broker, v1alpha1.BrokerState) {
	fake.updateStateMutex.RLock()
	defer fake.updateStateMutex.RUnlock()
	argsForCall := fake.updateStateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeKubeBrokerRepo) UpdateStateReturns(result1 error) {
	fake.updateStateMutex.Lock()
	defer fake.updateStateMutex.Unlock()
	fake.UpdateStateStub = nil
	fake.updateStateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeKubeBrokerRepo) UpdateStateReturnsOnCall(i int, result1 error) {
	fake.updateStateMutex.Lock()
	defer fake.updateStateMutex.Unlock()
	fake.UpdateStateStub = nil
	if fake.updateStateReturnsOnCall == nil {
		fake.updateStateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateStateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeKubeBrokerRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.updateStateMutex.RLock()
	defer fake.updateStateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeKubeBrokerRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ reconcilers.KubeBrokerRepo = new(FakeKubeBrokerRepo)
